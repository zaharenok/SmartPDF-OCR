#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è SmartPDF-OCR

–≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
–∫–∞–∫ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É, —Ç–∞–∫ –∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ.
"""

import os
import sys
from main import SmartPDFOCR

def example_basic_usage():
    """–ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    
    # –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π)
    pdf_path = "example_document.pdf"
    
    if not os.path.exists(pdf_path):
        print(f"‚ö†Ô∏è  –§–∞–π–ª {pdf_path} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π PDF —Ñ–∞–π–ª.")
        return
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    processor = SmartPDFOCR(pdf_path=pdf_path)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not processor.validate_input():
        print("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF
    result = processor.process_pdf()
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    processor.print_summary(result)

def example_custom_settings():
    """–ü—Ä–∏–º–µ—Ä —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    
    pdf_path = "example_document.pdf"
    
    if not os.path.exists(pdf_path):
        print(f"‚ö†Ô∏è  –§–∞–π–ª {pdf_path} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π PDF —Ñ–∞–π–ª.")
        return
    
    print("üîß –ó–∞–ø—É—Å–∫ —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    processor = SmartPDFOCR(
        pdf_path=pdf_path,
        output_dir="./custom_output",     # –°–≤–æ—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–∞
        language="rus+eng",               # –†—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        dpi=600,                          # –í—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        max_workers=8                     # –ë–æ–ª—å—à–µ –ø–æ—Ç–æ–∫–æ–≤
    )
    
    if not processor.validate_input():
        print("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        return
    
    result = processor.process_pdf()
    processor.print_summary(result)

def example_batch_processing():
    """–ü—Ä–∏–º–µ—Ä –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤"""
    
    # –°–ø–∏—Å–æ–∫ PDF —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    pdf_files = [
        "document1.pdf",
        "document2.pdf", 
        "document3.pdf"
    ]
    
    print("üìö –ó–∞–ø—É—Å–∫ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
    
    results = []
    
    for pdf_file in pdf_files:
        if not os.path.exists(pdf_file):
            print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {pdf_file} - —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            continue
        
        print(f"\nüìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ {pdf_file}...")
        
        processor = SmartPDFOCR(
            pdf_path=pdf_file,
            output_dir=f"./batch_output/{os.path.splitext(pdf_file)[0]}"
        )
        
        if processor.validate_input():
            result = processor.process_pdf()
            results.append({
                'file': pdf_file,
                'result': result
            })
            processor.print_summary(result)
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è {pdf_file}")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "="*60)
    print("–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ê–ö–ï–¢–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ò")
    print("="*60)
    
    total_files = len(results)
    successful_files = len([r for r in results if r['result']['success']])
    
    print(f"üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successful_files}")
    print(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful_files/total_files*100):.1f}%")
    
    for result in results:
        status = "‚úÖ" if result['result']['success'] else "‚ùå"
        print(f"{status} {result['file']}")

def example_error_handling():
    """–ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    
    print("üõ†Ô∏è  –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
    
    # –ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
    try:
        processor = SmartPDFOCR(pdf_path="nonexistent.pdf")
        
        if not processor.validate_input():
            print("‚ùå –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
    except Exception as e:
        print(f"üö´ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞: {e}")
    
    # –ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ-PDF —Ñ–∞–π–ª
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–µ-PDF —Ñ–∞–π–ª
        with open("test.txt", "w") as f:
            f.write("This is not a PDF")
        
        processor = SmartPDFOCR(pdf_path="test.txt")
        
        if not processor.validate_input():
            print("‚ùå –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è PDF")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        os.remove("test.txt")
        
    except Exception as e:
        print(f"üö´ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞: {e}")
        if os.path.exists("test.txt"):
            os.remove("test.txt")

def example_programmatic_access():
    """–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º"""
    
    pdf_path = "example_document.pdf"
    
    if not os.path.exists(pdf_path):
        print(f"‚ö†Ô∏è  –§–∞–π–ª {pdf_path} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")
        return
    
    print("üíª –ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º...")
    
    processor = SmartPDFOCR(pdf_path=pdf_path)
    
    if not processor.validate_input():
        return
    
    result = processor.process_pdf()
    
    if result['success']:
        stats = result['statistics']
        outputs = result['outputs']
        
        print(f"\nüìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –û–±—â–∏–π —Ç–µ–∫—Å—Ç: {stats['total_text_length']} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {stats['total_processing_time']:.2f} —Å–µ–∫")
        
        print(f"\nüìÑ –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤—ã—Ö–æ–¥–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:")
        for format_name in outputs.keys():
            print(f"   - {format_name}")
        
        # –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º
        text_only = outputs.get('text_only', '')
        if text_only:
            words = len(text_only.split())
            print(f"\nüìù –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç {words} —Å–ª–æ–≤")
            
            # –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤
            preview = text_only[:200] + "..." if len(text_only) > 200 else text_only
            print(f"\nüëÄ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:")
            print(f"   {preview}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –º–µ–Ω—é –ø—Ä–∏–º–µ—Ä–æ–≤"""
    
    print("ü§ñ SmartPDF-OCR - –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    print("="*50)
    
    examples = {
        "1": ("–ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ", example_basic_usage),
        "2": ("–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", example_custom_settings),
        "3": ("–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞", example_batch_processing),
        "4": ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", example_error_handling),
        "5": ("–ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –¥–æ—Å—Ç—É–ø", example_programmatic_access)
    }
    
    print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:")
    for key, (description, _) in examples.items():
        print(f"  {key}. {description}")
    
    print("\n0. –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã")
    print("q. –í—ã—Ö–æ–¥")
    
    choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä (1-5, 0, q): ").strip()
    
    if choice == "q":
        print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        return
    
    if choice == "0":
        print("\nüöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤...\n")
        for description, func in examples.values():
            print(f"\n{'='*20} {description} {'='*20}")
            try:
                func()
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–µ '{description}': {e}")
            print("="*60)
    
    elif choice in examples:
        description, func = examples[choice]
        print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞: {description}")
        try:
            func()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    main()